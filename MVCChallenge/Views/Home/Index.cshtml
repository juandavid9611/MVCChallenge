@model Tuple<List<ClassLibrary1.Item>, List<double>>
@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center">
    <h1 class="display-4">Asteroids</h1>
    <p>@ViewData["data"]</p>

    <form asp-action="Index" method="post">
        <fieldset>
            <legend>Select Dates</legend>
            Fechas: <input id="dateBegin" name="dateBegin" type="date" onchange="nextDate()">
            to
          <input id="dateEnd" name="dateEnd" type="date">
            <input type="submit" value="Show"/>
        </fieldset>
    </form>
    <br />
    <table class="table table-bordered table-responsive table-hover">
        <tr>
            <th>Id </th>
            <th>Approach Date</th>
            <th>Neo Reference Id</th>
            <th>Name</th>
            <th>Nasa Jpl Url</th>
            <th>Absolute Magnitude H</th>
            <th>Miss Distance in Kilometers</th>
            <th>Time to reach (seconds)</th>
        </tr>
        @if (Model != null)
        {
            var modelItem = Model.Item1.Zip(Model.Item2, (n, w) => new { Item = n, Distance = w });
            @foreach (var d in modelItem)
            {
                <tr>
                    <td>@d.Item.id</td>
                    <td>@d.Item.close_approach_data[0].close_approach_date</td>
                    <td>@d.Item.neo_reference_id</td>

                    <td>@d.Item.name</td>
                    <td>@d.Item.nasa_jpl_url</td>
                    <td>@d.Item.absolute_magnitude_h</td>
                    <td>@d.Item.close_approach_data[0].miss_distance.kilometers</td>
                    <td>@d.Distance</td>

                </tr>
            }
        }
    </table>
</div>

<script>
    const dateBegin = document.querySelector("#dateBegin");
    const dateEnd = document.querySelector("#dateEnd");
    dateEnd.addEventListener("change", () => prevDate());
    function nextDate() {
        let date = new Date(dateBegin.value);
        date.setDate(date.getDate() + 8);
        dateEnd.value = formatDate(date);
        console.log(formatDate(date));
    }
    function formatDate(date) {
        var d = date,
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();
        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;
        return [year, month, day].join('-');
    }
    function prevDate() {
        let date = new Date(dateEnd.value);
        date.setDate(date.getDate() - 6);
        dateBegin.value = formatDate(date);
        console.log(formatDate(date));
    }
</script>